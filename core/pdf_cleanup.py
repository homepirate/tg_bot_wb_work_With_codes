from pathlib import Path
import pdfplumber
from PyPDF2 import PdfReader

from sqlalchemy.ext.asyncio import AsyncSession
from services.printed_codes import get_all_codes
from core.pdf_rw import (
    PDF_DIR,
    _extract_code_from_text,
    _build_tail_writer,
    _write_pdf,
    _replace_file,
)

def _is_tmp_name(name: str) -> bool:
    """–§–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (__head_, __tail_, tmp)."""
    n = name.lower()
    return ("__head_" in n) or ("__tail_" in n) or ("tmp" in n)


async def purge_known_codes_in_dir(
    session: AsyncSession,
    directory: Path | str = PDF_DIR,
    include_tmp_files: bool = False,
) -> dict:
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º PDF –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã,
    –≥–¥–µ –∫–æ–¥ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ printed_code.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π set –≤—Å–µ—Ö –∫–æ–¥–æ–≤ (–æ–¥–∏–Ω SQL-–∑–∞–ø—Ä–æ—Å).
    """

    root = Path(directory)
    root.mkdir(parents=True, exist_ok=True)

    stats = {
        "files_scanned": 0,
        "files_modified": 0,
        "files_deleted": 0,
        "pages_scanned": 0,
        "pages_deleted": 0,
        "details": [],
    }

    # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    all_codes = await get_all_codes(session)
    stats["details"].append(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_codes)} –∫–æ–¥–æ–≤ –∏–∑ –ë–î")

    # 2Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º PDF
    for pdf_path in sorted(root.glob("*.pdf")):
        name = pdf_path.name
        if not include_tmp_files and _is_tmp_name(name):
            continue

        stats["files_scanned"] += 1
        try:
            reader = PdfReader(str(pdf_path))
        except Exception as e:
            stats["details"].append(f"‚ö†Ô∏è {name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ({e})")
            continue

        total_pages = len(reader.pages)
        if total_pages == 0:
            pdf_path.unlink(missing_ok=True)
            stats["files_deleted"] += 1
            stats["details"].append(f"üóë {name}: –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")
            continue

        keep_indexes = set()
        deleted_here = 0

        try:
            with pdfplumber.open(str(pdf_path)) as pl_pdf:
                for i in range(total_pages):
                    stats["pages_scanned"] += 1
                    txt = pl_pdf.pages[i].extract_text(x_tolerance=1.0, y_tolerance=1.0) or ""
                    code = _extract_code_from_text(txt)
                    if code and code in all_codes:
                        deleted_here += 1
                        continue
                    keep_indexes.add(i)
        except Exception as e:
            stats["details"].append(f"‚ö†Ô∏è {name}: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ({e})")
            continue

        if deleted_here == 0:
            continue

        stats["pages_deleted"] += deleted_here

        if not keep_indexes:
            pdf_path.unlink(missing_ok=True)
            stats["files_deleted"] += 1
            stats["details"].append(f"üóë {name}: —É–¥–∞–ª—ë–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é (–≤—Å–µ –∫–æ–¥—ã –∏–∑–≤–µ—Å—Ç–Ω—ã)")
            continue

        # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º PDF –±–µ–∑ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        try:
            writer = _build_tail_writer(reader, total_pages, keep_indexes)
            tmp_dir = pdf_path.parent / "tmp"
            tmp_dir.mkdir(parents=True, exist_ok=True)
            tmp_path = tmp_dir / f"{pdf_path.stem}__purged_tmp.pdf"
            _write_pdf(writer, tmp_path)
            _replace_file(tmp_path, pdf_path)
            stats["files_modified"] += 1
            stats["details"].append(
                f"‚úÇÔ∏è {name}: —É–¥–∞–ª–µ–Ω–æ {deleted_here} –∏–∑ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü"
            )
        except Exception as e:
            stats["details"].append(f"‚ö†Ô∏è {name}: –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ({e})")

    return stats
