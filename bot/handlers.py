import os
from io import BytesIO
from pathlib import Path

import pandas as pd
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, BufferedInputFile
from aiogram.filters import Command

import re

from core.pdf_report_builder import build_inventory_report_excel_bytes
from core.pdf_rw import build_pdf_from_dataframe, PDF_DIR
from core.pdf_splitter import split_pdf_by_meta, _save_temp_pdf
# from core.return_from_photo import return_by_photo
from core.return_pdf import return_pdf
from services.access_service import is_user_admin
from services.order_logging import log_orders_from_df
from .keyboards import main_kb
from .states import ReturnCode
from .utils import _download_document_bytes, _safe_filename
from config import config

router = Router()
REQUIRED_COLS = {"–∞—Ä—Ç–∏–∫—É–ª", "—Ä–∞–∑–º–µ—Ä", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"}


@router.message(Command("id"))
async def get_id(message: Message):
    await message.answer(f"{message.from_user.id}")

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤.\n"
        "–û—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —ç–∫—Å–µ–ª—å: —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: –∞—Ä—Ç–∏–∫—É–ª, —Ä–∞–∑–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç ‚Äî /report",
        reply_markup=main_kb(),
    )


@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å –∫–æ–¥")
async def on_return_code(message: Message, state: FSMContext):
    await state.set_state(ReturnCode.waiting_for_file)
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ **PDF** –∏–ª–∏ **—Ñ–æ—Ç–æ** —Å –∑–∞–∫–∞–∑–æ–º.\n"
        "–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞—é —Ñ–∞–π–ª –∏ –≤–µ—Ä–Ω—É –∫–æ–¥.",
        reply_markup=main_kb(),
    )


@router.message(ReturnCode.waiting_for_file, F.document)
async def on_pdf_from_state(message: Message, state: FSMContext):
    doc = message.document
    is_pdf = (doc.mime_type == "application/pdf") or (doc.file_name and doc.file_name.lower().endswith(".pdf"))
    if not is_pdf:
        await message.answer("–ù—É–∂–µ–Ω PDF-—Ñ–∞–π–ª (–∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    filename = _safe_filename(doc.file_name or "order.pdf")
    dest_dir = Path("pdf-codes") / "tmp"
    dest_dir.mkdir(parents=True, exist_ok=True)
    dest_path = dest_dir / filename

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download(doc, destination=dest_path)

    await message.answer(f"PDF –ø–æ–ª—É—á–µ–Ω: `{dest_path}`\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶", parse_mode="Markdown")
    async with config.AsyncSessionLocal() as session:
        result = await return_pdf(session, dest_path)

    summary = (
        f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(result['codes'])}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î: {len(result['deleted_codes'])}\n"
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result['saved'])}"
    )

    await message.answer(summary)


    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –∂–¥—ë—Ç–µ –µ—â—ë —Ñ–∞–π–ª—ã)
    await state.clear()


@router.message(Command("report"))
async def generate_report(message: Message):
    try:
        data, filename = await build_inventory_report_excel_bytes()
        await message.answer_document(
            BufferedInputFile(data, filename=filename),
            caption="–û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤."
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç: {e}")

@router.message(
    F.document & (
        (F.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") |
        (F.document.mime_type == "application/vnd.ms-excel") |
        (F.document.file_name.endswith(".xlsx")) |
        (F.document.file_name.endswith(".xls"))
    )
)
async def handle_orders_excel(message: Message):
    try:
        # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        data = await _download_document_bytes(message.bot, message.document.file_id)
        df = pd.read_excel(BytesIO(data))

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        df.columns = [str(c).strip().lower() for c in df.columns]

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if not REQUIRED_COLS.issubset(df.columns):
            missing = REQUIRED_COLS - set(df.columns)
            await message.answer(f"‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: {', '.join(missing)}")
            return

        await message.answer("‚úÖ –í —Ñ–∞–π–ª–µ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –∞—Ä—Ç–∏–∫—É–ª, —Ä–∞–∑–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

        # –≤—ã–∑—ã–≤–∞–µ–º —Å–±–æ—Ä–∫—É –∏—Ç–æ–≥–æ–≤–æ–≥–æ PDF
        result_path, shortages_report = await build_pdf_from_dataframe(df, PDF_DIR / "result.pdf")

        try:
            inserted = await log_orders_from_df(df, shortages_report, message.from_user.id)
        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")

        if not result_path:
            msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π PDF: –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º/—Ä–∞–∑–º–µ—Ä–∞–º."
            if shortages_report:
                msg += f"\n\n{shortages_report}"
            await message.answer(msg)
            return

        await message.answer_document(FSInputFile(result_path, filename="result.pdf"))


        if shortages_report:
            await message.answer(shortages_report)

        try:
            os.remove(result_path)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {result_path}: {e}")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")


@router.message(
    F.document & (F.document.mime_type == "application/pdf")
)
async def handle_pdf(message: Message):
    user_id = message.from_user.id
    document = message.document

    async with config.AsyncSessionLocal() as session:  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é
        if not await is_user_admin(session, user_id):
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF.")
            return

    # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî —ç—Ç–æ –∞–¥–º–∏–Ω
    await message.answer("‚úÖ PDF –ø—Ä–∏–Ω—è—Ç. –†–∞–∑–¥–µ–ª—è—é –ø–æ (–∞—Ä—Ç–∏–∫—É–ª, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç)‚Ä¶")

    data = await _download_document_bytes(message.bot, document.file_id)
    src_tmp_path = await _save_temp_pdf(data, document.file_name, user_id)

    try:
        report = split_pdf_by_meta(src_tmp_path)

        if not report["outputs"]:
            msg = (
                "–ì–æ—Ç–æ–≤–æ. –ù–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–±—Ä–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {report['total_pages']}\n"
                f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {report['skipped_without_meta']}\n"
                f"–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –µ—Å—Ç—å ¬´–ê—Ä—Ç–∏–∫—É–ª ‚Ä¶¬ª, ¬´–†–∞–∑–º–µ—Ä: ‚Ä¶¬ª, ¬´–¶–≤–µ—Ç: ‚Ä¶¬ª."
            )
            await message.answer(msg)
            return

        lines = [
            "üìÑ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã:",
            *(f"‚Ä¢ {o['path'].name} ‚Äî {o['pages']} —Å—Ç—Ä.  [{o['key'][0]} | {o['key'][1]} | {o['key'][2]}]"
              for o in report["outputs"]),
            "",
            f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {report['skipped_without_meta']}",
        ]
        await message.answer("\n".join(lines))
    finally:
        try:
            src_tmp_path.unlink(missing_ok=True)
        except Exception:
            pass
        # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ–ø—É—Å—Ç–µ–ª–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥—á–∏—Å—Ç–∏—Ç—å
        tmp_dir = src_tmp_path.parent
        try:
            if tmp_dir.exists() and not any(tmp_dir.iterdir()):
                tmp_dir.rmdir()
        except Exception:
            pass